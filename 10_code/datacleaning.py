# -*- coding: utf-8 -*-
"""DataCleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s8tPShWJusrVNbUOveQqhJaGlPL1jAqr
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Load the data
data = pd.read_csv("https://raw.githubusercontent.com/Kelly0604/BIOSTAT_FINAL/main/00_data/heart_disease.csv")

# Preprocessing the data
def dataPreprocessing(input_df):
  """Convert all categorical columns to numeric."""
  cat_columns = input_df.select_dtypes(['object']).columns
  input_df[cat_columns] = input_df[cat_columns].apply(lambda x: pd.factorize(x)[0])
  return input_df

df = dataPreprocessing(data)

print(data.columns)

import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit, cross_val_score, GridSearchCV, cross_val_predict
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_curve, roc_auc_score

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

nan_values = data.isnull().sum()
print(nan_values)

# Data Bining
# Fill NaN values with the mean of each column
data_filled = data.fillna(data.mean())

# Data Binning
data_bin = data_filled.copy()
continuous_f = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']

for feature in continuous_f:
    bins = 5
    data_bin[feature] = pd.cut(data_filled[feature], bins=bins, labels=range(bins)).astype(np.int64)

data_bin

# One-Hot Encoding
categorical_fts = ['Sex', 'ChestPainType', 'FastingBS', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
continuous_f = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']

data_dumm = pd.get_dummies(data_bin, columns=categorical_fts + continuous_f)
data_dumm